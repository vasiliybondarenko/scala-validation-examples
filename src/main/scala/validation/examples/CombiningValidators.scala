package validation.examples

import cats.syntax.all.*
import cats.implicits.*
import cats.{Apply, Invariant, Semigroup, SemigroupK, Semigroupal}
import cats.data.{NonEmptyChain, Validated, ValidatedNec}
import cats.data.Validated.{Invalid, Valid}

import math.Numeric.Implicits.infixNumericOps
import scala.math.Ordered.orderingToOrdered

private object CombiningValidators extends App {

  trait Validator[A]:
    def validate(x: A): ValidatedNec[String, A]

  case class Planet(name: String, diameter: Double)
  def lowerBoundValidator[A: Numeric](lowerBound: A): Validator[A] = entity =>
    Validated.cond(
      entity >= lowerBound,
      entity,
      NonEmptyChain.one(s"[$entity]: Value cannot be lower than $lowerBound")
    )

  def upperBoundValidator[A: Numeric](upperBound: A): Validator[A] =
    entity =>
      Validated.cond(
        entity <= upperBound,
        entity,
        NonEmptyChain.one(
          s"[$entity]: Value cannot be greater than $upperBound"
        )
      )

  lazy val nonEmptyStringValidator: Validator[String] = entity =>
    Validated.cond(
      !entity.isBlank,
      entity,
      NonEmptyChain.one("string cannot be empty")
    )

  type ErrorOr[A] = ValidatedNec[String, A]

  // here we implemented Invariant[Validator], Semigroupal[Validator] and SemigroupK[Validator]
  // for Scala2 we can reduce this boilerplate by using `cats-tagless`
  // for more details please take a look here https://github.com/typelevel/cats-tagless/blob/master/examples/src/main/scala-2/cats/tagless/example/ValidationExample.scala#L24
  given invariant: Invariant[Validator] with
    override def imap[A, B](fa: Validator[A])(f: A => B)(
        g: B => A
    ): Validator[B] = (x: B) => fa.validate(g(x)).map(f)
  given semigroupal: Semigroupal[Validator] with
    override def product[A, B](fa: Validator[A], fb: Validator[B]) =
      (x: (A, B)) =>
        Semigroupal[ErrorOr] // Semigroupal[ErrorOr] is provided by cats
          .product(fa.validate(x._1), fb.validate(x._2))

  lazy val semigroupK: SemigroupK[Validator] = new SemigroupK[Validator]:
    override def combineK[A](v1: Validator[A], v2: Validator[A]): Validator[A] =
      (x: A) => SemigroupK[ErrorOr].combineK(v1.validate(x), v2.validate(x))

  // we are interested in planets with diameter between Mercury's and Earth's
  lazy val diameterLowerBoundValidator = lowerBoundValidator(
    2439.0 * 2
  ) // Mercury diameter
  lazy val diameterUpperBoundValidator = upperBoundValidator(
    6378.0 * 2
  ) // Earth diameter

  // `fallback` validator like `getOrElse`
  // combining Validated with SemigroupK
  // here we need only SemigroupK[Validated] witch is provided for us out the box by magic import import cats.syntax.all.*
  lazy val diameterValidator1: Validator[Double] = (diameter: Double) =>
    diameterLowerBoundValidator.validate(
      diameter
    ) <+> diameterUpperBoundValidator.validate(diameter)

  // `fallback` validator like `getOrElse`, so it returns first Valid value or Invalid(errors) if there are no valid values
  // combining two validators of the same type to one validator with SemigroupK
  // here we need SemigroupK[Validator] instance which should be defined by a developer
  // or can be auto generated by cats-tagless (see cats.tagless.example.ValidationExample for more details)
  lazy val diameterValidator2: Validator[Double] =
    semigroupK.combineK(
      diameterLowerBoundValidator,
      diameterUpperBoundValidator
    )

  // accumulative error validator
  lazy val diameterValidator3: Validator[Double] = (x: Double) =>
    Apply[ErrorOr].productL(
      diameterLowerBoundValidator.validate(x)
    )(diameterUpperBoundValidator.validate(x))

  // creating Validator[(String, Double)] from (Validator[String], Validator[Double])
  lazy val tupleValidator: Validator[(String, Double)] =
    semigroupal.product(nonEmptyStringValidator, diameterValidator2)

  // imapN requires Invariant[Validator] and Semigroupal[Validator] instances which were provided earlier
  lazy val planetValidator: Validator[Planet] =
    (nonEmptyStringValidator, diameterValidator3).imapN(Planet.apply)(
      Tuple.fromProductTyped(_)
    )

  // testing:
  println(
    planetValidator.validate(
      Planet("", 1.0)
    )
  ) // Invalid(Chain(string cannot be empty, [1.0]: Value cannot be lower than 4878.0))
  println(
    planetValidator.validate(
      Planet("Proxima b", 12000)
    )
  ) // Valid(Planet(Proxima b,12000.0))

}
